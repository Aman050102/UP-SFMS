(() => {
  const $ = (s, el = document) => el.querySelector(s);

  // -----------------------------
  // API URLs
  // -----------------------------
  const API_LIST = "/api/staff/equipments/";
  const API_ITEM = (id = 0) => `/api/staff/equipment/${id}/`;

  // -----------------------------
  // CSRF from cookie
  // -----------------------------
  function csrftoken() {
    const m = document.cookie.match(/(?:^|;)\s*csrftoken=([^;]+)/);
    return m ? decodeURIComponent(m[1]) : "";
  }

  // -----------------------------
  // Elements
  // -----------------------------
  const listEl = $("#equipList");
  const inputName = $("#equipName");
  const inputStock = $("#equipStock");
  const btnAdd = $("#btnAdd");
  const sheetOk = $("#sheetOk");

  // -----------------------------
  // UI helpers
  // -----------------------------
  function openSheet() {
    if (!sheetOk) return;
    sheetOk.setAttribute("aria-hidden", "false");
    setTimeout(() => sheetOk.setAttribute("aria-hidden", "true"), 1200);
  }

  function clampInt(n) {
    const x = Number.isFinite(+n) ? +n : 0;
    return Math.max(0, Math.floor(x));
  }

  function toKeyName(s) {
    return (s || "").trim().toLowerCase();
  }

  // -----------------------------
  // Row template
  // -----------------------------
  function rowTemplate(item) {
    const li = document.createElement("li");
    li.className = "row";
    li.dataset.id = item.id;
    li.dataset.total = String(item.total ?? 0); // ‡πÄ‡∏Å‡πá‡∏ö total ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ô DOM

    li.innerHTML = `
      <div class="name-wrap">
        <span class="name" title="‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠">${item.name}</span>
        <input class="name-edit" type="text" value="${item.name}" aria-label="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠" />
      </div>

      <div class="inline-edit">
        <button class="icon-btn steper dec" title="‡∏•‡∏î‡∏•‡∏á">‚àí</button>
        <input class="stock" type="number" min="0" value="${item.stock}" />
        <button class="icon-btn steper inc" title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô">+</button>
      </div>

      <div class="actions">
        <button class="icon-btn save" title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å">üíæ</button>
        <button class="icon-btn danger del" title="‡∏•‡∏ö">üóëÔ∏è</button>
      </div>
    `;
    return li;
  }

  // -----------------------------
  // Fetch list
  // -----------------------------
  async function fetchList() {
    const res = await fetch(API_LIST, {
      headers: { Accept: "application/json" },
    });
    if (!res.ok) return alert("‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    const data = await res.json();
    listEl.innerHTML = "";

    const rows = (data && (data.rows || data.data || [])) || [];
    // ‡πÄ‡∏Å‡πá‡∏ö Map ‡∏ä‡∏∑‡πà‡∏≠ ‚Üí li ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ duplicate ‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö lower-case)
    const byName = new Map();
    rows.forEach((it) => {
      const li = rowTemplate(it);
      listEl.appendChild(li);
      byName.set(toKeyName(it.name), li);
    });
    listEl._byName = byName;
  }

  // -----------------------------
  // Helpers: find existing item by (case-insensitive) name
  // -----------------------------
  function findRowByName(name) {
    const key = toKeyName(name);
    return listEl?._byName?.get(key) || null;
  }

  // -----------------------------
  // Create or Merge (‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥ ‚Üí ‡∏ö‡∏ß‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å)
  // -----------------------------
  async function addItem() {
    const name = (inputName.value || "").trim();
    if (!name) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå");

    const addStock = clampInt(inputStock?.value ?? "0");
    if (addStock <= 0) return alert("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");

    const existLi = findRowByName(name);

    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥ ‚Üí ‡∏ö‡∏ß‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏° (PATCH)
    if (existLi) {
      const id = existLi.dataset.id;
      const curStock = clampInt($(".stock", existLi).value || "0");
      const curTotal = clampInt(existLi.dataset.total || "0");

      const newStock = curStock + addStock;
      const newTotal = Math.max(curTotal, newStock); // ‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏ô‡∏ù‡∏±‡πà‡∏á server clamp

      const res = await fetch(API_ITEM(id), {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
          "X-CSRFToken": csrftoken(),
          Accept: "application/json",
        },
        body: JSON.stringify({ stock: newStock, total: newTotal }),
      });
      const data = await res.json().catch(() => ({}));
      if (!res.ok || !data.ok)
        return alert(data.message || "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

      // sync UI
      $(".stock", existLi).value = data.row?.stock ?? newStock;
      existLi.dataset.total = String(data.row?.total ?? newTotal);

      openSheet();
    } else {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà (POST) ‚Üí ‡∏ï‡∏±‡πâ‡∏á total = stock ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      const stock = addStock;
      const total = stock;

      const res = await fetch(API_ITEM(0), {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRFToken": csrftoken(),
          Accept: "application/json",
        },
        body: JSON.stringify({ name, total, stock }),
      });

      const data = await res.json().catch(() => ({}));
      if (!res.ok || !data.ok)
        return alert(data.message || "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      openSheet();
    }

    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå/‡πÇ‡∏ü‡∏Å‡∏±‡∏™ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
    inputName.value = "";
    inputStock.value = "10";
    inputName.focus();

    await fetchList();
  }

  // -----------------------------
  // Update (name/stock) ‚Äî ‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ stock > total ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á total ‚â• stock
  // -----------------------------
  async function saveItem(li) {
    const id = li.dataset.id;
    const stock = clampInt($(".stock", li).value || "0");

    const nameEl = $(".name", li);
    const nameField = $(".name-edit", li);
    const name = (
      nameField.classList.contains("show")
        ? nameField.value
        : nameEl.textContent
    ).trim();

    const curTotal = clampInt(li.dataset.total || "0");
    const patchBody = { name, stock };

    // ‡∏ñ‡πâ‡∏≤ stock ‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ total ‡πÄ‡∏î‡∏¥‡∏° ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï total ‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏°
    if (stock > curTotal) {
      patchBody.total = stock;
    }

    const res = await fetch(API_ITEM(id), {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": csrftoken(),
        Accept: "application/json",
      },
      body: JSON.stringify(patchBody),
    });

    const data = await res.json().catch(() => ({}));
    if (!res.ok || !data.ok) return alert(data.message || "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    // sync UI
    nameEl.textContent = data.row?.name ?? name;
    nameField.value = data.row?.name ?? name;
    $(".stock", li).value = data.row?.stock ?? stock;
    li.dataset.total = String(data.row?.total ?? patchBody.total ?? curTotal);

    // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠
    nameField.classList.remove("show");
    nameEl.classList.remove("hide");

    openSheet();

    // refresh map ‡∏ä‡∏∑‡πà‡∏≠
    await refreshNameMap();
  }

  async function refreshNameMap() {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏´‡∏•‡∏±‡∏á rename)
    const byName = new Map();
    listEl.querySelectorAll(".row").forEach((li) => {
      const key = toKeyName($(".name", li).textContent);
      byName.set(key, li);
    });
    listEl._byName = byName;
  }

  // -----------------------------
  // Delete
  // -----------------------------
  async function deleteItem(li) {
    const id = li.dataset.id;
    if (!confirm("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;

    const res = await fetch(API_ITEM(id), {
      method: "DELETE",
      headers: { "X-CSRFToken": csrftoken(), Accept: "application/json" },
    });

    let data = {};
    try {
      data = await res.json();
    } catch (e) {}

    if (!res.ok || data.ok === false) {
      return alert((data && data.message) || "‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
    li.remove();
    openSheet();
    await refreshNameMap();
  }

  // -----------------------------
  // Inline events
  // -----------------------------
  function enterEditName(li, focus = true) {
    const name = $(".name", li);
    const edit = $(".name-edit", li);
    name.classList.add("hide");
    edit.classList.add("show");
    if (focus) {
      edit.focus();
      edit.setSelectionRange(0, edit.value.length);
    }
  }

  function exitEditName(li, revert = false) {
    const name = $(".name", li);
    const edit = $(".name-edit", li);
    if (revert) edit.value = name.textContent.trim();
    name.classList.remove("hide");
    edit.classList.remove("show");
  }

  // -----------------------------
  // Global events
  // -----------------------------
  btnAdd?.addEventListener("click", addItem);
  inputName?.addEventListener("keydown", (e) => {
    if (e.key === "Enter") addItem();
  });
  inputStock?.addEventListener("keydown", (e) => {
    if (e.key === "Enter") addItem();
  });

  // ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
  listEl?.addEventListener("click", (e) => {
    const li = e.target.closest(".row");
    if (!li) return;

    // stepers ‚Äî ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏¢ ‡πÜ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)
    if (e.target.classList.contains("inc")) {
      const fld = $(".stock", li);
      fld.value = clampInt(+fld.value + 1);
      return;
    }
    if (e.target.classList.contains("dec")) {
      const fld = $(".stock", li);
      fld.value = Math.max(0, clampInt(+fld.value - 1));
      return;
    }

    if (e.target.classList.contains("save")) return void saveItem(li);
    if (e.target.classList.contains("del")) return void deleteItem(li);

    if (e.target.classList.contains("name")) enterEditName(li);
  });

  // ‡∏Ñ‡∏µ‡∏¢‡πå‡∏•‡∏±‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  listEl?.addEventListener("keydown", (e) => {
    const li = e.target.closest(".row");
    if (!li) return;

    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠
    if (e.target.classList.contains("name-edit")) {
      if (e.key === "Enter") {
        e.preventDefault();
        return void saveItem(li);
      } else if (e.key === "Escape") {
        return void exitEditName(li, true);
      }
    }

    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÅ‡∏Å‡πâ‡∏™‡∏ï‡πá‡∏≠‡∏Å
    if (e.target.classList.contains("stock")) {
      if (e.key === "Enter") {
        e.preventDefault();
        return void saveItem(li);
      }
      if (e.key === "Escape") {
        e.preventDefault();
        e.target.blur();
      }
    }
  });

  // ‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö/‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏Ç‡∏ì‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå
  listEl?.addEventListener("input", (e) => {
    if (!e.target.classList.contains("stock")) return;
    const n = clampInt(e.target.value);
    if (String(n) !== e.target.value) e.target.value = String(n);
  });

  // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‚Üí revert
  listEl?.addEventListener(
    "blur",
    (e) => {
      const li = e.target.closest(".row");
      if (!li) return;
      if (e.target.classList.contains("name-edit")) {
        exitEditName(li, true);
      }
    },
    true,
  );

  // init
  fetchList();
})();
